include scripts

/ - ap accepted
/ - ap rejected

- timer = { 'n' => 'today only', 't' => 'past two days', 'w' => 'past week', 'm' => 'past month', 'a' => 'all time' }

| search term: #{search_term}; time period: #{timer["#{time_period}"]}; degree: #{masters_phd}; season: #{search_season}
br I won't go further back than 20 pages (~5000 results at 250 results/page) for any one search.
| If you see nothing, then it's likely the applicant(s) did not submit GRE & uGPA data.

- def get_box(data)\
    result = [data.descriptive_statistics[:min], data.percentile(25), data.median, data.percentile(75), data.descriptive_statistics[:max]]; \
    result = [0, 0, 0, 0, 0] if result.any? { |e| e.to_s == 'NaN' || e.nil? }; \
    result \
  end

- accepted_gre = {}
- rejected_gre = {}
- accepted_gre_box = {}
- rejected_gre_box = {}
- accepted.each do |key, value|
  - if key == :gre_quant || key == :gre_verbal
    - accepted_gre[key] = accepted[key].mean
    - accepted_gre[key] = 0 if accepted_gre[key].to_s == 'NaN'
    - accepted_gre_box[key] = get_box(accepted[key])
- rejected.each do |key, value|
  - if key == :gre_quant || key == :gre_verbal
    - rejected_gre[key] = rejected[key].mean
    - rejected_gre[key] = 0 if rejected_gre[key].to_s == 'NaN'
    - rejected_gre_box[key] = get_box(rejected[key])

- accepted_gpa_awa = {}
- rejected_gpa_awa = {}
- accepted_gpa_awa_box = {}
- rejected_gpa_awa_box = {}
- accepted.each do |key, value|
  - if key == :gre_awa || key == :undergraduate_gpa
    - accepted_gpa_awa[key] = accepted[key].mean
    - accepted_gpa_awa[key] = 0 if accepted_gpa_awa[key].to_s == 'NaN'
    - accepted_gpa_awa_box[key] = get_box(accepted[key])
- rejected.each do |key, value|
  - if key == :gre_awa || key == :undergraduate_gpa
    - rejected_gpa_awa[key] = rejected[key].mean
    - rejected_gpa_awa[key] = 0 if rejected_gpa_awa[key].to_s == 'NaN'
    - rejected_gpa_awa_box[key] = get_box(rejected[key])

- result_gre = [{ name: 'Accepted', data: accepted_gre }, { name: 'Rejected', data: rejected_gre }]
- result_gpa_awa = [{ name: 'Accepted', data: accepted_gpa_awa }, { name: 'Rejected', data: rejected_gpa_awa }]

- a_r_nation_visual = Hash.new { |hash, key| hash[key] = {} }

- q_array = [[],[]]
- v_array = [[],[]]
- gpa_array = [[],[]]
- awa_array = [[],[]]

- a_r_nation.each_key do |key|
  - a_r_nation[key].each_key do |stat|
    - a_r_nation_visual[key]["#{stat}_mean"] = a_r_nation[key][stat].mean
    - a_r_nation_visual[key]["#{stat}_mean"] = 0 if ['', 'NaN'].include? a_r_nation_visual[key]["#{stat}_mean"].to_s
    - if key.to_s.include? 'accept'
      - case stat.to_s
        - when 'undergraduate_gpa' then gpa_array[0] << [key.to_s[-1].upcase, a_r_nation_visual[key]["#{stat}_mean"]]
        - when 'gre_quant' then q_array[0] << [key.to_s[-1].upcase, a_r_nation_visual[key]["#{stat}_mean"]]
        - when 'gre_verbal' then v_array[0] << [key.to_s[-1].upcase, a_r_nation_visual[key]["#{stat}_mean"]]
        - when 'gre_awa' then awa_array[0] << [key.to_s[-1].upcase, a_r_nation_visual[key]["#{stat}_mean"]]
    - elsif key.to_s.include? 'reject'
      - case stat.to_s
        - when 'undergraduate_gpa' then gpa_array[1] << [key.to_s[-1].upcase, a_r_nation_visual[key]["#{stat}_mean"]]
        - when 'gre_quant' then q_array[1] << [key.to_s[-1].upcase, a_r_nation_visual[key]["#{stat}_mean"]]
        - when 'gre_verbal' then v_array[1] << [key.to_s[-1].upcase, a_r_nation_visual[key]["#{stat}_mean"]]
        - when 'gre_awa' then awa_array[1] << [key.to_s[-1].upcase, a_r_nation_visual[key]["#{stat}_mean"]]
    - a_r_nation_visual[key]["#{stat}_box"] = get_box(a_r_nation[key][stat])

- accepted_gre.each_key { |key| accepted_gre[key] ||= 0 }
- rejected_gre.each_key { |key| rejected_gre[key] ||= 0 }
- accepted_gpa_awa.each_key { |key| accepted_gpa_awa[key] ||= 0 }
- rejected_gpa_awa.each_key { |key| rejected_gpa_awa[key] ||= 0 }

/ - ap accepted_gre
/ - ap rejected_gre
/ - ap accepted_gpa_awa
/ - ap rejected_gpa_awa

/ - ap q_array
/ - ap v_array
/ - ap gpa_array
/ - ap awa_array
/ - ap a_r_nation_visual

/ - ap result_gre
/ - ap result_gpa_awa
/ - ap accepted_gre_box
/ - ap rejected_gre_box
/ - ap accepted_gpa_awa_box
/ - ap rejected_gpa_awa_box

/ div class='row'
/   div class='col-md-1'
/   div class='col-md-5'
/     h4 Using Average Scores
/     == column_chart result_gre, discrete: true
/   div class='col-md-5'
/     h4 Using Average Scores
/     == column_chart result_gpa_awa, discrete: true
/   div class='col-md-1'

div class='row'
  div class='col-md-1'
  div class='col-md-5'
    div id='quant-verbal-column'
  div class='col-md-5'
    div id='gpa-awa-column'
  div class='col-md-1'

div class='row'
  div class='col-md-1'
  div class='col-md-5'
    div id='quant-verbal'
  div class='col-md-5'
    div id='gpa-awa'
  div class='col-md-1'


javascript:
  var accept_values = JSON.parse("#{accepted_gre_box.values}");
  var reject_values = JSON.parse("#{rejected_gre_box.values}");
  var accept_gawa_values = JSON.parse("#{accepted_gpa_awa_box.values}");
  var reject_gawa_values = JSON.parse("#{rejected_gpa_awa_box.values}");
  var q_array = JSON.parse("#{q_array}".replace(/&quot;/g, '"').replace(/amp;/g, ''));
  var v_array = JSON.parse("#{v_array}".replace(/&quot;/g, '"').replace(/amp;/g, ''));
  var awa_array = JSON.parse("#{awa_array}".replace(/&quot;/g, '"').replace(/amp;/g, ''));
  var gpa_array = JSON.parse("#{gpa_array}".replace(/&quot;/g, '"').replace(/amp;/g, ''));
  console.log(v_array[0]);
  $(function () {
    $('#quant-verbal').highcharts({
        chart: {
            type: 'boxplot'
        },
        title: {
            text: 'Box plot for GRE Quant & Verbal Scores'
        },
        subtitle: {
            text: 'Minimum & Maximum used for whiskers'
        },
        legend: {
            enabled: false
        },
        xAxis: {
            categories: [
                'Accepted - Q',
                'Rejected - Q',
                'Accepted - V',
                'Rejected - V'
            ],
            title: {
                text: 'GRE Section'
            }
        },
        yAxis: {
            title: {
                text: 'Scores'
            }
        },
        series: [{
            name: 'Observations',
            data: [
                accept_values[0],
                reject_values[0],
                accept_values[1],
                reject_values[1]
            ],
            tooltip: {
                headerFormat: '<em>Score: {point.key}</em><br/>'
            }
        }, {
            name: 'Outlier',
            color: Highcharts.getOptions().colors[0],
            type: 'scatter',
            data: [],
            marker: {
                fillColor: 'white',
                lineWidth: 1,
                lineColor: Highcharts.getOptions().colors[0]
            },
            tooltip: {
                pointFormat: 'Observation: {point.y}'
            }
        }]
    });
    $('#gpa-awa').highcharts({
        chart: {
            type: 'boxplot'
        },
        title: {
            text: 'Box plot for Undergraduate GPA & GRE AWA'
        },
        subtitle: {
            text: 'Minimum & Maximum used for whiskers'
        },
        legend: {
            enabled: false
        },
        xAxis: {
            categories: [
                'Accepted - uGPA',
                'Rejected - uGPA',
                'Accepted - GRE AWA',
                'Rejected - GRE AWA'
            ],
            title: {
                text: 'uGPA & GRE'
            }
        },
        yAxis: {
            title: {
                text: 'Scores'
            }
        },
        series: [{
            name: 'Observations',
            data: [
                accept_gawa_values[0],
                reject_gawa_values[0],
                accept_gawa_values[1],
                reject_gawa_values[1]
            ],
            tooltip: {
                headerFormat: '<em>Score: {point.key}</em><br/>'
            }
        }, {
            name: 'Outlier',
            color: Highcharts.getOptions().colors[0],
            type: 'scatter',
            data: [],
            marker: {
                fillColor: 'white',
                lineWidth: 1,
                lineColor: Highcharts.getOptions().colors[0]
            },
            tooltip: {
                pointFormat: 'Observation: {point.y}'
            }
        }]
    });
    $('#quant-verbal-column').highcharts({
        chart: {
            type: 'column'
        },
        title: {
            text: 'Average GRE Quant & Verbal Scores'
        },
        subtitle: {
            text: 'Click any column to view data by location: A/U/I.'
        },
        xAxis: {
            type: 'category'
        },
        yAxis: {
            max: 250,
            title: {
                text: 'Score'
            }
        },
        legend: {
            enabled: false
        },
        plotOptions: {
            series: {
                borderWidth: 0,
                dataLabels: {
                    enabled: true,
                    format: '{point.y}'
                }
            }
        },
        tooltip: {
            headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
            pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y}</b><br/>'
        },
        series: [{
           name: 'GRE Score',
           colorByPoint: true,
           data: [{
               name: 'Accepted - Q',
               y: #{accepted_gre[:gre_quant]},
               drilldown: 'Accepted Quants'
           }, {
               name: 'Rejected - Q',
               y: #{rejected_gre[:gre_quant]},
               drilldown: 'Rejected Quants'
           }, {
                name: 'Accepted - V',
                y: #{accepted_gre[:gre_verbal]},
                drilldown: 'Accepted Verbal'
            }, {
                name: 'Rejected - V',
                y: #{rejected_gre[:gre_verbal]},
                drilldown: 'Rejected Verbal'
            }]
        }],
        drilldown: {
            series: [{
                name: 'Accepted - Quant Scores by A/U/I',
                id: 'Accepted Quants',
                data: q_array[0]
            }, {
                name: 'Rejected - Quant Scores by A/U/I',
                id: 'Rejected Quants',
                data: q_array[1]
            }, {
                name: 'Accepted - Verbal Scores by A/U/I',
                id: 'Accepted Verbal',
                data: v_array[0]
            }, {
              name: 'Rejected - Verbal Scores by A/U/I',
              id: 'Rejected Verbal',
              data: v_array[1]
            }]
        }
    });
    $('#gpa-awa-column').highcharts({
        chart: {
            type: 'column'
        },
        title: {
            text: 'Average Undergraduate GPA & GRE AWA Score'
        },
        subtitle: {
            text: 'Click any column to view data by location: A/U/I.'
        },
        xAxis: {
            type: 'category'
        },
        yAxis: {
            max: 6,
            title: {
                text: 'Score'
            }
        },
        legend: {
            enabled: false
        },
        plotOptions: {
            series: {
                borderWidth: 0,
                dataLabels: {
                    enabled: true,
                    format: '{point.y}'
                }
            }
        },
        tooltip: {
            headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
            pointFormat: '<span style="color:{point.color}">{point.name}</span>: <b>{point.y}</b><br/>'
        },
        series: [{
           name: 'uGPA & GRE AWA',
           colorByPoint: true,
           data: [{
               name: 'Accepted - uGPA',
               y: #{accepted_gpa_awa[:undergraduate_gpa]},
               drilldown: 'Accepted uGPA'
           }, {
               name: 'Rejected - uGPA',
               y: #{rejected_gpa_awa[:undergraduate_gpa]},
               drilldown: 'Rejected uGPA'
           }, {
               name: 'Accepted - AWA',
               y: #{accepted_gpa_awa[:gre_awa]},
               drilldown: 'Accepted AWA'
           }, {
               name: 'Rejected - AWA',
               y: #{rejected_gpa_awa[:gre_awa]},
               drilldown: 'Rejected AWA'
           }]
        }],
        drilldown: {
            series: [{
                name: 'Accepted - AWA Scores by A/U/I',
                id: 'Accepted AWA',
                data: awa_array[0]
            }, {
                name: 'Rejected - AWA Scores by A/U/I',
                id: 'Rejected AWA',
                data: awa_array[1]
            }, {
                name: 'Accepted - uGPA by A/U/I',
                id: 'Accepted uGPA',
                data: gpa_array[0]
            }, {
              name: 'Rejected - uGPA by A/U/I',
              id: 'Rejected uGPA',
              data: gpa_array[1]
            }]
        }
    });
  });
